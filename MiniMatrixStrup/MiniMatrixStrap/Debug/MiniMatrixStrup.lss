
MiniMatrixStrup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000002a0  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800088  00800088  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000344  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ba  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c8  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e6  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ef  00000000  00000000  00000d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000f01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e0 ea       	ldi	r30, 0xA0	; 160
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a8 38       	cpi	r26, 0x88	; 136
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a8 e8       	ldi	r26, 0x88	; 136
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a5 39       	cpi	r26, 0x95	; 149
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	94 d0       	rcall	.+296    	; 0x16c <main>
  44:	2b c1       	rjmp	.+598    	; 0x29c <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_6>:
void m_point(int x, int y);
//Display Buffer functions
void d_readNextRow();
int d_getPoint(int x, int y);

ISR(TIM0_COMPA_vect){
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
	interruptFlag = 1;	
  54:	81 e0       	ldi	r24, 0x01	; 1
  56:	80 93 8f 00 	sts	0x008F, r24
}
  5a:	8f 91       	pop	r24
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f 90       	pop	r0
  62:	1f 90       	pop	r1
  64:	18 95       	reti

00000066 <m_cls>:
		 }
    }
}

void m_cls(){
	DDRB = 0;
  66:	17 ba       	out	0x17, r1	; 23
	PORTB = 0;
  68:	18 ba       	out	0x18, r1	; 24
  6a:	08 95       	ret

0000006c <m_point>:
}

void m_point(int x, int y){
	DDRB = (1 << anode[y][x]) | (1 << cathode[y][x]);
  6c:	66 0f       	add	r22, r22
  6e:	77 1f       	adc	r23, r23
  70:	66 0f       	add	r22, r22
  72:	77 1f       	adc	r23, r23
  74:	86 0f       	add	r24, r22
  76:	97 1f       	adc	r25, r23
  78:	fc 01       	movw	r30, r24
  7a:	e0 5a       	subi	r30, 0xA0	; 160
  7c:	ff 4f       	sbci	r31, 0xFF	; 255
  7e:	21 e0       	ldi	r18, 0x01	; 1
  80:	30 e0       	ldi	r19, 0x00	; 0
  82:	a9 01       	movw	r20, r18
  84:	00 80       	ld	r0, Z
  86:	02 c0       	rjmp	.+4      	; 0x8c <m_point+0x20>
  88:	44 0f       	add	r20, r20
  8a:	55 1f       	adc	r21, r21
  8c:	0a 94       	dec	r0
  8e:	e2 f7       	brpl	.-8      	; 0x88 <m_point+0x1c>
  90:	fc 01       	movw	r30, r24
  92:	ec 58       	subi	r30, 0x8C	; 140
  94:	ff 4f       	sbci	r31, 0xFF	; 255
  96:	c9 01       	movw	r24, r18
  98:	00 80       	ld	r0, Z
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <__stack+0x1>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	0a 94       	dec	r0
  a2:	e2 f7       	brpl	.-8      	; 0x9c <m_point+0x30>
  a4:	48 2b       	or	r20, r24
  a6:	47 bb       	out	0x17, r20	; 23
	PORTB = (1 << anode[y][x]);
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <d_readNextRow>:
}

void d_readNextRow(){
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29

	uint8_t buf[3] = {0};

#ifdef EEPROM_BUSY_WAIT_ENABLE
	eeprom_busy_wait();
  b0:	e1 99       	sbic	0x1c, 1	; 28
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <d_readNextRow+0x4>
#endif
	
	buf[0] = eeprom_read_byte((uint8_t *)(0x08 + ((nowPos / 2) % dataLen)));
  b4:	80 91 8a 00 	lds	r24, 0x008A
  b8:	60 91 88 00 	lds	r22, 0x0088
  bc:	86 95       	lsr	r24
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	bd d0       	rcall	.+378    	; 0x23e <__divmodhi4>
  c4:	08 96       	adiw	r24, 0x08	; 8
  c6:	e2 d0       	rcall	.+452    	; 0x28c <__eerd_byte_tn13a>
  c8:	d8 2f       	mov	r29, r24
#ifdef EEPROM_BUSY_WAIT_ENABLE
	eeprom_busy_wait();
  ca:	e1 99       	sbic	0x1c, 1	; 28
  cc:	fe cf       	rjmp	.-4      	; 0xca <d_readNextRow+0x1e>
#endif
	buf[1] = eeprom_read_byte((uint8_t *)(0x08 + ((nowPos / 2 + 1) % dataLen)));
  ce:	20 91 8a 00 	lds	r18, 0x008A
  d2:	60 91 88 00 	lds	r22, 0x0088
  d6:	26 95       	lsr	r18
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	c9 01       	movw	r24, r18
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	ae d0       	rcall	.+348    	; 0x23e <__divmodhi4>
  e2:	08 96       	adiw	r24, 0x08	; 8
  e4:	d3 d0       	rcall	.+422    	; 0x28c <__eerd_byte_tn13a>
  e6:	c8 2f       	mov	r28, r24
#ifdef EEPROM_BUSY_WAIT_ENABLE
	eeprom_busy_wait();
  e8:	e1 99       	sbic	0x1c, 1	; 28
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <d_readNextRow+0x3c>
#endif
	buf[2] = eeprom_read_byte((uint8_t *)(0x08 + ((nowPos / 2 + 2) % dataLen)));
  ec:	20 91 8a 00 	lds	r18, 0x008A
  f0:	60 91 88 00 	lds	r22, 0x0088
  f4:	26 95       	lsr	r18
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	c9 01       	movw	r24, r18
  fa:	02 96       	adiw	r24, 0x02	; 2
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	9f d0       	rcall	.+318    	; 0x23e <__divmodhi4>
 100:	08 96       	adiw	r24, 0x08	; 8
 102:	c4 d0       	rcall	.+392    	; 0x28c <__eerd_byte_tn13a>
	
	if(nowPos % 2){
 104:	90 91 8a 00 	lds	r25, 0x008A
 108:	90 ff       	sbrs	r25, 0
 10a:	14 c0       	rjmp	.+40     	; 0x134 <d_readNextRow+0x88>
		//odd
		disp[0] = buf[0] & 0x0F;
 10c:	df 70       	andi	r29, 0x0F	; 15
 10e:	d0 93 90 00 	sts	0x0090, r29
		disp[1] = buf[1] >> 4;
 112:	9c 2f       	mov	r25, r28
 114:	92 95       	swap	r25
 116:	9f 70       	andi	r25, 0x0F	; 15
 118:	90 93 91 00 	sts	0x0091, r25
		disp[2] = buf[1] & 0x0F;
 11c:	cf 70       	andi	r28, 0x0F	; 15
 11e:	c0 93 92 00 	sts	0x0092, r28
		disp[3] = buf[2] >> 4;
 122:	98 2f       	mov	r25, r24
 124:	92 95       	swap	r25
 126:	9f 70       	andi	r25, 0x0F	; 15
 128:	90 93 93 00 	sts	0x0093, r25
		disp[4] = buf[2] & 0x0F;
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	80 93 94 00 	sts	0x0094, r24
 132:	14 c0       	rjmp	.+40     	; 0x15c <d_readNextRow+0xb0>
	}else{
		//even
		disp[0] = buf[0] >> 4;
 134:	9d 2f       	mov	r25, r29
 136:	92 95       	swap	r25
 138:	9f 70       	andi	r25, 0x0F	; 15
 13a:	90 93 90 00 	sts	0x0090, r25
		disp[1] = buf[0] & 0x0F;
 13e:	df 70       	andi	r29, 0x0F	; 15
 140:	d0 93 91 00 	sts	0x0091, r29
		disp[2] = buf[1] >> 4;
 144:	9c 2f       	mov	r25, r28
 146:	92 95       	swap	r25
 148:	9f 70       	andi	r25, 0x0F	; 15
 14a:	90 93 92 00 	sts	0x0092, r25
		disp[3] = buf[1] & 0x0F;
 14e:	cf 70       	andi	r28, 0x0F	; 15
 150:	c0 93 93 00 	sts	0x0093, r28
		disp[4] = buf[2] >> 4;	
 154:	82 95       	swap	r24
 156:	8f 70       	andi	r24, 0x0F	; 15
 158:	80 93 94 00 	sts	0x0094, r24
	}
	
	nowPos++;
 15c:	80 91 8a 00 	lds	r24, 0x008A
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 8a 00 	sts	0x008A, r24
	
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <main>:


int main(void)
{
#ifdef EEPROM_BUSY_WAIT_ENABLE
	eeprom_busy_wait();
 16c:	e1 99       	sbic	0x1c, 1	; 28
 16e:	fe cf       	rjmp	.-4      	; 0x16c <main>
#endif
	dataLen = eeprom_read_byte((uint8_t *)EEPROM_DATA_LEN_ADDR);
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	8b d0       	rcall	.+278    	; 0x28c <__eerd_byte_tn13a>
 176:	80 93 88 00 	sts	0x0088, r24
			
	//Timer initialize
	TCCR0A = 0x02;	//CTC
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = 0x02;	//Ratio: 8 f=150,000
 17e:	83 bf       	out	0x33, r24	; 51
	TIMSK0 = 0x04;	//Match A interrupt enable
 180:	84 e0       	ldi	r24, 0x04	; 4
 182:	89 bf       	out	0x39, r24	; 57
	
	OCR0A = 50;	// f = 150,000 / 50 = 3,000
 184:	82 e3       	ldi	r24, 0x32	; 50
 186:	86 bf       	out	0x36, r24	; 54
	
	sei();
 188:	78 94       	sei
	
	d_readNextRow();
 18a:	90 df       	rcall	.-224    	; 0xac <d_readNextRow>
	
    while(1)
    {
		if(interruptFlag){
 18c:	80 91 8f 00 	lds	r24, 0x008F
 190:	88 23       	and	r24, r24
 192:	e9 f1       	breq	.+122    	; 0x20e <main+0xa2>
			interruptFlag = 0;
 194:	10 92 8f 00 	sts	0x008F, r1
			if(clock == UINT16_MAX) {
 198:	80 91 8d 00 	lds	r24, 0x008D
 19c:	90 91 8e 00 	lds	r25, 0x008E
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	29 f4       	brne	.+10     	; 0x1ae <main+0x42>
				clock = 0;
 1a4:	10 92 8e 00 	sts	0x008E, r1
 1a8:	10 92 8d 00 	sts	0x008D, r1
 1ac:	09 c0       	rjmp	.+18     	; 0x1c0 <main+0x54>
			}else{
				clock++;
 1ae:	80 91 8d 00 	lds	r24, 0x008D
 1b2:	90 91 8e 00 	lds	r25, 0x008E
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	90 93 8e 00 	sts	0x008E, r25
 1bc:	80 93 8d 00 	sts	0x008D, r24
			}
				
			int x = drawPos % 4;
 1c0:	20 91 89 00 	lds	r18, 0x0089
 1c4:	23 70       	andi	r18, 0x03	; 3
 1c6:	f2 2e       	mov	r15, r18
 1c8:	02 2f       	mov	r16, r18
 1ca:	10 e0       	ldi	r17, 0x00	; 0
			int y = drawPos / 4;
 1cc:	c0 91 89 00 	lds	r28, 0x0089
 1d0:	c6 95       	lsr	r28
 1d2:	c6 95       	lsr	r28
 1d4:	d0 e0       	ldi	r29, 0x00	; 0
				
			m_cls();
 1d6:	47 df       	rcall	.-370    	; 0x66 <m_cls>
	nowPos++;
	
}

int d_getPoint(int x, int y){
	return (disp[y] & (1 << x)) ? 1 : 0; 
 1d8:	fe 01       	movw	r30, r28
 1da:	e0 57       	subi	r30, 0x70	; 112
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	40 81       	ld	r20, Z
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	9a 01       	movw	r18, r20
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <main+0x7e>
 1e6:	35 95       	asr	r19
 1e8:	27 95       	ror	r18
 1ea:	fa 94       	dec	r15
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <main+0x7a>
			int x = drawPos % 4;
			int y = drawPos / 4;
				
			m_cls();
				
			if(d_getPoint(x,y)){
 1ee:	20 ff       	sbrs	r18, 0
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <main+0x8c>
				m_point(x, y);
 1f2:	be 01       	movw	r22, r28
 1f4:	c8 01       	movw	r24, r16
 1f6:	3a df       	rcall	.-396    	; 0x6c <m_point>
			}
			drawPos++;
 1f8:	80 91 89 00 	lds	r24, 0x0089
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	80 93 89 00 	sts	0x0089, r24
			if(drawPos > 19) drawPos = 0;
 202:	80 91 89 00 	lds	r24, 0x0089
 206:	84 31       	cpi	r24, 0x14	; 20
 208:	10 f0       	brcs	.+4      	; 0x20e <main+0xa2>
 20a:	10 92 89 00 	sts	0x0089, r1
		}
		
         if(clock - prevReadTime > 400){
 20e:	80 91 8d 00 	lds	r24, 0x008D
 212:	90 91 8e 00 	lds	r25, 0x008E
 216:	20 91 8b 00 	lds	r18, 0x008B
 21a:	30 91 8c 00 	lds	r19, 0x008C
 21e:	82 1b       	sub	r24, r18
 220:	93 0b       	sbc	r25, r19
 222:	81 39       	cpi	r24, 0x91	; 145
 224:	91 40       	sbci	r25, 0x01	; 1
 226:	08 f4       	brcc	.+2      	; 0x22a <main+0xbe>
 228:	b1 cf       	rjmp	.-158    	; 0x18c <main+0x20>
			 prevReadTime = clock;
 22a:	80 91 8d 00 	lds	r24, 0x008D
 22e:	90 91 8e 00 	lds	r25, 0x008E
 232:	90 93 8c 00 	sts	0x008C, r25
 236:	80 93 8b 00 	sts	0x008B, r24
			 d_readNextRow();
 23a:	38 df       	rcall	.-400    	; 0xac <d_readNextRow>
 23c:	a7 cf       	rjmp	.-178    	; 0x18c <main+0x20>

0000023e <__divmodhi4>:
 23e:	97 fb       	bst	r25, 7
 240:	07 2e       	mov	r0, r23
 242:	16 f4       	brtc	.+4      	; 0x248 <__divmodhi4+0xa>
 244:	00 94       	com	r0
 246:	06 d0       	rcall	.+12     	; 0x254 <__divmodhi4_neg1>
 248:	77 fd       	sbrc	r23, 7
 24a:	08 d0       	rcall	.+16     	; 0x25c <__divmodhi4_neg2>
 24c:	0b d0       	rcall	.+22     	; 0x264 <__udivmodhi4>
 24e:	07 fc       	sbrc	r0, 7
 250:	05 d0       	rcall	.+10     	; 0x25c <__divmodhi4_neg2>
 252:	3e f4       	brtc	.+14     	; 0x262 <__divmodhi4_exit>

00000254 <__divmodhi4_neg1>:
 254:	90 95       	com	r25
 256:	81 95       	neg	r24
 258:	9f 4f       	sbci	r25, 0xFF	; 255
 25a:	08 95       	ret

0000025c <__divmodhi4_neg2>:
 25c:	70 95       	com	r23
 25e:	61 95       	neg	r22
 260:	7f 4f       	sbci	r23, 0xFF	; 255

00000262 <__divmodhi4_exit>:
 262:	08 95       	ret

00000264 <__udivmodhi4>:
 264:	aa 1b       	sub	r26, r26
 266:	bb 1b       	sub	r27, r27
 268:	51 e1       	ldi	r21, 0x11	; 17
 26a:	07 c0       	rjmp	.+14     	; 0x27a <__udivmodhi4_ep>

0000026c <__udivmodhi4_loop>:
 26c:	aa 1f       	adc	r26, r26
 26e:	bb 1f       	adc	r27, r27
 270:	a6 17       	cp	r26, r22
 272:	b7 07       	cpc	r27, r23
 274:	10 f0       	brcs	.+4      	; 0x27a <__udivmodhi4_ep>
 276:	a6 1b       	sub	r26, r22
 278:	b7 0b       	sbc	r27, r23

0000027a <__udivmodhi4_ep>:
 27a:	88 1f       	adc	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	5a 95       	dec	r21
 280:	a9 f7       	brne	.-22     	; 0x26c <__udivmodhi4_loop>
 282:	80 95       	com	r24
 284:	90 95       	com	r25
 286:	bc 01       	movw	r22, r24
 288:	cd 01       	movw	r24, r26
 28a:	08 95       	ret

0000028c <__eerd_byte_tn13a>:
 28c:	e1 99       	sbic	0x1c, 1	; 28
 28e:	fe cf       	rjmp	.-4      	; 0x28c <__eerd_byte_tn13a>
 290:	1f ba       	out	0x1f, r1	; 31
 292:	8e bb       	out	0x1e, r24	; 30
 294:	e0 9a       	sbi	0x1c, 0	; 28
 296:	99 27       	eor	r25, r25
 298:	8d b3       	in	r24, 0x1d	; 29
 29a:	08 95       	ret

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
